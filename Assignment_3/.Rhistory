y = DGEList(counts=countMatrix, group=ct)
y = calcNormFactors(y)
design = model.matrix(~ct+dt)
y = estimateDisp(y,design)
fit = glmQLFit(y,design)
qlf = glmQLFTest(fit, coef=2)
allDEStats = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats$Gene.ID=row.names(allDEStats)
head(allDEStats)
for(i in 1:15533){
if(allDEStats$Gene.ID[i] == "TNF"){
count = i
}
}
ggplot(allDEStats,aes(x=logFC,y=-log(PValue))) + geom_point() + geom_point(data=allDEStats[allDEStats$Gene.ID[count],],color="red",size=3)
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
dt = as.factor(gsub("B_|LCL_","\\1",colnames(countMatrix)))
y = DGEList(counts=countMatrix, group=ct)
y = calcNormFactors(y)
design = model.matrix(~ct+dt)
y = estimateDisp(y,design)
fit = glmQLFit(y,design)
qlf = glmQLFTest(fit, coef=2)
allDEStats2 = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStat2s$Gene.ID=row.names(allDEStats2)
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
dt = as.factor(gsub("B_|LCL_","\\1",colnames(countMatrix)))
y = DGEList(counts=countMatrix, group=ct)
y = calcNormFactors(y)
design = model.matrix(~ct+dt)
y = estimateDisp(y,design)
fit = glmQLFit(y,design)
qlf = glmQLFTest(fit, coef=2)
allDEStats2 = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats2$Gene.ID=row.names(allDEStats2)
head(allDEStats2)
for(i in 1:15533){
if(allDEStats2$Gene.ID[i] == "TNF"){
count = i
}
}
ggplot(allDEStats2,aes(x=logFC,y=-log(PValue))) + geom_point() + geom_point(data=allDEStats2[allDEStats2$Gene.ID[count],],color="red",size=3)
n <- 0
for(i in 1:15533){
if(abs(allDEStats[i,1]-allDEStats2[i,1]) >= 1)
n = n+1
}
n <- 0
for(i in 1:15533){
if(abs(allDEStats[i,1]-allDEStats2[i,1]) >= 1)
n = n+1
}
n
n <- 0
for(i in 1:15533){
if(abs(allDEStats2[i,1]-allDEStats1[i,1]) >= 1)
n = n+1
}
n <- 0
for(i in 1:15533){
if(abs(allDEStats2[i,1]-allDEStats[i,1]) >= 1)
n = n+1
}
n
# This line makes a variable with either B or LCL, cutting out the identifier
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
# This line creates a list using the data from countMatrix, and the names from ct
y = DGEList(counts=countMatrix, group=ct)
# This line normalizes the list we just made
y = calcNormFactors(y)
# This line makes a model by filtering grouping factors
design = model.matrix(~ct)
# This line estimates the qCML and tagwise dispersions
y = estimateDisp(y,design)
# This line fits a model with the data above
fit = glmQLFit(y,design)
#This line tests the model, forming the table below
qlf = glmQLFTest(fit, coef=2)
# These lines show the top few entries in the table below
allDEStats = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats$Gene.ID=row.names(allDEStats)
head(allDEStats)
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
dt = as.factor(gsub("B_|LCL_","\\1",colnames(countMatrix)))
y = DGEList(counts=countMatrix, group=ct)
y = calcNormFactors(y)
design = model.matrix(~ct+dt)
y = estimateDisp(y,design)
fit = glmQLFit(y,design)
qlf = glmQLFTest(fit, coef=2)
allDEStats2 = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats2$Gene.ID=row.names(allDEStats2)
head(allDEStats2)
for(i in 1:15533){
if(allDEStats2$Gene.ID[i] == "TNF"){
count = i
}
}
ggplot(allDEStats2,aes(x=logFC,y=-log(PValue))) + geom_point() + geom_point(data=allDEStats2[allDEStats2$Gene.ID[count],],color="red",size=3)
n <- 0
for(i in 1:15533){
if(abs(allDEStats[i,1]-allDEStats2[i,1]) >= 1)
n = n+1
}
n
plot(allDEStats$logFC,allDEStats2$logFC)
a <- cor(allDEStats2[,1],allDEStats[,1],method=c("pearson"))
plot(allDEStats$logFC,allDEStats2$logFC)
a <- cor(allDEStats2[,1],allDEStats[,1],method=c("pearson"))
a
n <- 0
for(i in 1:15533){
if(abs(allDEStats[i,1]-allDEStats2[i,1]) >= 1) {
n = n+1
}
}
n
# This line makes a variable with either B or LCL, cutting out the identifier
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
# This line creates a list using the data from countMatrix, and the names from ct
y = DGEList(counts=countMatrix, group=ct)
# This line normalizes the list we just made
y = calcNormFactors(y)
# This line makes a model by filtering grouping factors
design = model.matrix(~ct)
# This line estimates the qCML and tagwise dispersions
y = estimateDisp(y,design)
# This line fits a model with the data above
fit = glmQLFit(y,design)
#This line tests the model, forming the table below
qlf = glmQLFTest(fit, coef=4)
# This line makes a variable with either B or LCL, cutting out the identifier
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
# This line creates a list using the data from countMatrix, and the names from ct
y = DGEList(counts=countMatrix, group=ct)
# This line normalizes the list we just made
y = calcNormFactors(y)
# This line makes a model by filtering grouping factors
design = model.matrix(~ct)
# This line estimates the qCML and tagwise dispersions
y = estimateDisp(y,design)
# This line fits a model with the data above
fit = glmQLFit(y,design)
#This line tests the model, forming the table below
qlf = glmQLFTest(fit, coef=3)
# This line makes a variable with either B or LCL, cutting out the identifier
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
# This line creates a list using the data from countMatrix, and the names from ct
y = DGEList(counts=countMatrix, group=ct)
# This line normalizes the list we just made
y = calcNormFactors(y)
# This line makes a model by filtering grouping factors
design = model.matrix(~ct)
# This line estimates the qCML and tagwise dispersions
y = estimateDisp(y,design)
# This line fits a model with the data above
fit = glmQLFit(y,design)
#This line tests the model, forming the table below
qlf = glmQLFTest(fit, coef=2.5)
# These lines show the top few entries in the table below
allDEStats = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats$Gene.ID=row.names(allDEStats)
head(allDEStats)
count <- 0
for(i in 1:15533){
if(allDEStats$Gene.ID[i] == "TNF"){
count = i
}
}
ggplot(allDEStats,aes(x=logFC,y=-log(PValue))) + geom_point() + geom_point(data=allDEStats[allDEStats$Gene.ID[count],],color="red",size=3)
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
dt = as.factor(gsub("B_|LCL_","\\1",colnames(countMatrix)))
y = DGEList(counts=countMatrix, group=ct)
y = calcNormFactors(y)
design = model.matrix(~ct+dt)
y = estimateDisp(y,design)
fit = glmQLFit(y,design)
qlf = glmQLFTest(fit, coef=2.5)
allDEStats2 = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats2$Gene.ID=row.names(allDEStats2)
head(allDEStats2)
for(i in 1:15533){
if(allDEStats2$Gene.ID[i] == "TNF"){
count = i
}
}
ggplot(allDEStats2,aes(x=logFC,y=-log(PValue))) + geom_point() + geom_point(data=allDEStats2[allDEStats2$Gene.ID[count],],color="red",size=3)
n <- 0
for(i in 1:15533){
if(abs(allDEStats[i,1]-allDEStats2[i,1]) >= 1) {
n = n+1
}
}
n
# This line makes a variable with either B or LCL, cutting out the identifier
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
# This line creates a list using the data from countMatrix, and the names from ct
y = DGEList(counts=countMatrix, group=ct)
# This line normalizes the list we just made
y = calcNormFactors(y)
# This line makes a model by filtering grouping factors
design = model.matrix(~ct)
# This line estimates the qCML and tagwise dispersions
y = estimateDisp(y,design)
# This line fits a model with the data above
fit = glmQLFit(y,design)
#This line tests the model, forming the table below
qlf = glmQLFTest(fit, coef=1.5)
# These lines show the top few entries in the table below
allDEStats = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats$Gene.ID=row.names(allDEStats)
head(allDEStats)
count <- 0
for(i in 1:15533){
if(allDEStats$Gene.ID[i] == "TNF"){
count = i
}
}
ggplot(allDEStats,aes(x=logFC,y=-log(PValue))) + geom_point() + geom_point(data=allDEStats[allDEStats$Gene.ID[count],],color="red",size=3)
# This line makes a variable with either B or LCL, cutting out the identifier
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
# This line creates a list using the data from countMatrix, and the names from ct
y = DGEList(counts=countMatrix, group=ct)
# This line normalizes the list we just made
y = calcNormFactors(y)
# This line makes a model by filtering grouping factors
design = model.matrix(~ct)
# This line estimates the qCML and tagwise dispersions
y = estimateDisp(y,design)
# This line fits a model with the data above
fit = glmQLFit(y,design)
#This line tests the model, forming the table below
qlf = glmQLFTest(fit, coef=2)
# These lines show the top few entries in the table below
allDEStats = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats$Gene.ID=row.names(allDEStats)
head(allDEStats)
# This line makes a variable with either B or LCL, cutting out the identifier
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
# This line creates a list using the data from countMatrix, and the names from ct
y = DGEList(counts=countMatrix, group=ct)
# This line normalizes the list we just made
y = calcNormFactors(y)
# This line makes a model by filtering grouping factors
design = model.matrix(~ct)
# This line estimates the qCML and tagwise dispersions
y = estimateDisp(y,design)
# This line fits a model with the data above
fit = glmQLFit(y,design)
#This line tests the model, forming the table below
qlf = glmQLFTest(fit, coef=2.5)
# These lines show the top few entries in the table below
allDEStats = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats$Gene.ID=row.names(allDEStats)
head(allDEStats)
# This line makes a variable with either B or LCL, cutting out the identifier
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
# This line creates a list using the data from countMatrix, and the names from ct
y = DGEList(counts=countMatrix, group=ct)
# This line normalizes the list we just made
y = calcNormFactors(y)
# This line makes a model by filtering grouping factors
design = model.matrix(~ct)
# This line estimates the qCML and tagwise dispersions
y = estimateDisp(y,design)
# This line fits a model with the data above
fit = glmQLFit(y,design)
#This line tests the model, forming the table below
qlf = glmQLFTest(fit, coef=2)
# These lines show the top few entries in the table below
allDEStats = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats$Gene.ID=row.names(allDEStats)
head(allDEStats)
count <- 0
for(i in 1:15533){
if(allDEStats$Gene.ID[i] == "TNF"){
count = i
}
}
ggplot(allDEStats,aes(x=logFC,y=-log(PValue))) + geom_point() + geom_point(data=allDEStats[allDEStats$Gene.ID[count],],color="red",size=3)
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
dt = as.factor(gsub("B_|LCL_","\\1",colnames(countMatrix)))
y = DGEList(counts=countMatrix, group=ct)
y = calcNormFactors(y)
design = model.matrix(~ct+dt)
y = estimateDisp(y,design)
fit = glmQLFit(y,design)
qlf = glmQLFTest(fit, coef=1.5)
allDEStats2 = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats2$Gene.ID=row.names(allDEStats2)
head(allDEStats2)
for(i in 1:15533){
if(allDEStats2$Gene.ID[i] == "TNF"){
count = i
}
}
ggplot(allDEStats2,aes(x=logFC,y=-log(PValue))) + geom_point() + geom_point(data=allDEStats2[allDEStats2$Gene.ID[count],],color="red",size=3)
ct = as.factor(gsub("_[A-E]","\\1",colnames(countMatrix)))
dt = as.factor(gsub("B_|LCL_","\\1",colnames(countMatrix)))
y = DGEList(counts=countMatrix, group=ct)
y = calcNormFactors(y)
design = model.matrix(~ct+dt)
y = estimateDisp(y,design)
fit = glmQLFit(y,design)
qlf = glmQLFTest(fit, coef=2)
allDEStats2 = as.data.frame(topTags(qlf,n=nrow(countMatrix)))
allDEStats2$Gene.ID=row.names(allDEStats2)
head(allDEStats2)
for(i in 1:15533){
if(allDEStats2$Gene.ID[i] == "TNF"){
count = i
}
}
ggplot(allDEStats2,aes(x=logFC,y=-log(PValue))) + geom_point() + geom_point(data=allDEStats2[allDEStats2$Gene.ID[count],],color="red",size=3)
n <- 0
for(i in 1:15533){
if(abs(allDEStats[i,1]-allDEStats2[i,1]) >= 1) {
n = n+1
}
}
n
allDEStatsOrdered <- allDEStats[order(allDEStats[,6],decreasing=FALSE),]
allDEStatsOrdered2 <- allDEStats2[order(allDEStats2[,6],decreasing=FALSE),]
n <- 0
for(i in 1:15533){
if(abs(allDEStats[i,1]-allDEStats2[i,1]) >= 1) {
n = n+1
}
}
n
allDEStatsOrdered <- allDEStats[order(allDEStats[,6],decreasing=FALSE),]
allDEStatsOrdered2 <- allDEStats2[order(allDEStats2[,6],decreasing=FALSE),]
n <- 0
for(i in 1:15533){
if(abs(allDEStatsOrdered[i,1]-allDEStatsOrdered2[i,1]) >= 1) {
n = n+1
}
}
n
orderedDEStats <- allDEStats[order(allDEStats[,6],decreasing=FALSE),]
orderedDEStats2 <- allDEStats2[order(allDEStats2[,6],decreasing=FALSE),]
n <- 0
for(i in 1:15533){
if(abs(orderedDEStats[i,1]-orderedDEStats2[i,1]) >= 1) {
n = n+1
}
}
n
plot(orderedDEStats$logFC,orderedDEStats2$logFC)
a <- cor(allDEStats2[,1],allDEStats[,1],method=c("pearson"))
a
plot(orderedDEStats$logFC,orderedDEStats2$logFC)
a <- cor(orderedDEStats2[,1],orderedDEStats[,1],method=c("pearson"))
a
moreThanOne <- list()
for(n in 1:15533){
if(abs(orderedDEStats[n,1]-orderedDEStats2[n,1]) >= 1)
moreThanOne[[length(moreThanOne)+1]] <- orderedDEStats[n,6]
}
moreThanOneUnlisted <- unlist(moreThanOne)
moreThanOneNum <- list()
c <- 0
for(b in 1:85){
for(n in 1:247620){
if(rnaSeqDataMeltedRPKM[n,2]==moreThanOne[b]){
c=c+1
}
}
}
moreThanOne <- list()
for(n in 1:15533){
if(abs(orderedDEStats[n,1]-orderedDEStats2[n,1]) >= 1)
moreThanOne[[length(moreThanOne)+1]] <- orderedDEStats[n,6]
}
moreThanOneUnlisted <- unlist(moreThanOne)
moreThanOneNum <- list()
c <- 0
for(b in 1:85){
for(n in 1:247620){
if(rnaSeqDataMeltedRPKM[n,2]==moreThanOne[b]){
c=c+1
}
}
}
c
moreThanOne <- list()
for(i in 1:15533){
if(abs(orderedDEStats[i,1]-orderedDEStats2[i,1]) >= 1){
moreThanOne[[length(moreThanOne)+1]] <- orderedDEStats[i,6]
}
}
moreThanOneUnlisted <- unlist(moreThanOne)
moreThanOneNum <- list()
orderedRPKM <- rnaSeqDataMeltedRPKM[order(rnaSeqDataMeltedRPKM[,2]),decreasing=FALSE,]
moreThanOne <- list()
for(i in 1:15533){
if(abs(orderedDEStats[i,1]-orderedDEStats2[i,1]) >= 1){
moreThanOne[[length(moreThanOne)+1]] <- orderedDEStats[i,6]
}
}
moreThanOneUnlisted <- unlist(moreThanOne)
moreThanOneNum <- list()
orderedRPKM <- rnaSeqDataMeltedRPKM[order(rnaSeqDataMeltedRPKM[,2]),decreasing=FALSE)]
moreThanOne <- list()
for(i in 1:15533){
if(abs(orderedDEStats[i,1]-orderedDEStats2[i,1]) >= 1){
moreThanOne[[length(moreThanOne)+1]] <- orderedDEStats[i,6]
}
}
moreThanOneUnlisted <- unlist(moreThanOne)
moreThanOneNum <- list()
orderedRPKM <- rnaSeqDataMeltedRPKM[order(rnaSeqDataMeltedRPKM[,2],decreasing=FALSE)]
moreThanOne <- list()
for(i in 1:15533){
if(abs(orderedDEStats[i,1]-orderedDEStats2[i,1]) >= 1){
moreThanOne[[length(moreThanOne)+1]] <- orderedDEStats[i,6]
}
}
moreThanOneUnlisted <- unlist(moreThanOne)
moreThanOneNum <- list()
orderedRPKM <- rnaSeqDataMeltedRPKM[order(rnaSeqDataMeltedRPKM[,2],decreasing=FALSE),]
c <- 0
for(b in 1:85){
for(n in 1:247620){
if(orderedRPKM[n,2] == moreThanOne[b]){
for(t in 1:10){
moreThanOneNum[b,t] <- orderedRPKM[(n+t),7]
}
break
}
}
}
moreThanOne <- list()
for(n in 1:15533){
if(abs(allDEStatsOrdered[n,1]-allDEStatsOrdered2[n,1]) >= 1)
moreThanOne[[length(moreThanOne)+1]] <- allDEStatsOrdered[n,6]
}
moreThanOneUnlisted <- unlist(moreThanOne)
moreThanOneNum <- matrix(0,85,10)
rpkmOrdered <- rnaSeqDataMeltedRPKM[order(rnaSeqDataMeltedRPKM[,2], decreasing=FALSE),]
c <- 0
for(b in 1:85){
for(n in 1:247620){
if(rpkmOrdered[n,2]==moreThanOne[b]){
for(t in 1:10){
moreThanOneNum[b,t] <- rpkmOrdered[(n+t),7]
}
break
}
}
}
heatmap(moreThanOneNum)
moreThanOne <- list()
for(n in 1:15533){
if(abs(allDEStatsOrdered[n,1]-allDEStatsOrdered2[n,1]) >= 1)
moreThanOne[[length(moreThanOne)+1]] <- allDEStatsOrdered[n,6]
}
moreThanOneUnlisted <- unlist(moreThanOne)
moreThanOneNum <- matrix(0,85,10)
rpkmOrdered <- rnaSeqDataMeltedRPKM[order(rnaSeqDataMeltedRPKM[,2], decreasing=FALSE),]
c <- 0
for(b in 1:85){
for(n in 1:247620){
if(rpkmOrdered[n,2]==moreThanOne[b]){
for(t in 1:10){
moreThanOneNum[b,t] <- rpkmOrdered[(n+t),7]
}
break
}
}
}
heatmap(moreThanOneNum)
greaterThanOne <- list()
for(i in 1:15533){
if(abs(allDEStatsOrdered[i,1]-allDEStatsOrdered2[i,1]) >= 1)
greaterThanOne[[length(greaterThanOne)+1]] <- allDEStatsOrdered[i,6]
}
greaterThanOneUnlisted <- unlist(greaterThanOne)
greaterThanOneNum <- matrix(0,85,10)
rpkmOrdered <- rnaSeqDataMeltedRPKM[order(rnaSeqDataMeltedRPKM[,2], decreasing=FALSE),]
c <- 0
for(i in 1:85){
for(n in 1:247620){
if(rpkmOrdered[n,2]==greaterThanOne[i]){
for(x in 1:10){
greaterThanOneNum[i,t] <- rpkmOrdered[(n+x),7]
}
break
}
}
}
heatmap(greaterThanOneNum)
greaterThanOne <- list()
for(i in 1:15533){
if(abs(allDEStatsOrdered[i,1]-allDEStatsOrdered2[i,1]) >= 1)
greaterThanOne[[length(greaterThanOne)+1]] <- allDEStatsOrdered[i,6]
}
greaterThanOneUnlisted <- unlist(greaterThanOne)
greaterThanOneNum <- matrix(0,85,10)
rpkmOrdered <- rnaSeqDataMeltedRPKM[order(rnaSeqDataMeltedRPKM[,2], decreasing=FALSE),]
c <- 0
for(i in 1:85){
for(n in 1:247620){
if(rpkmOrdered[n,2]==greaterThanOne[i]){
for(x in 1:10){
greaterThanOneNum[i,x] <- rpkmOrdered[(n+x),7]
}
break
}
}
}
heatmap(greaterThanOneNum)
